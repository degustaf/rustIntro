use std::env::args;
use std::error::Error;
use std::fs::File;
use std::io::prelude::*;
use std::io::BufReader;

fn main() -> Result<(), Box<dyn Error>> {
    // processing multiple files might be desirable, but is a change infunctionality.
    let fname = args().nth(1).ok_or("A file name to process is required.")?;
    let file = File::open(fname)?;
    let buf = BufReader::new(file);

    let mut acc = 0.0;
    for line in buf.lines() {
        let val = line.unwrap();
        match val.parse::<f64>() {
            Ok(f) => {
                acc += f;
            }
            Err(_) => {
                // This hides what error was generated by trying to parse val as f64.
                // It's not obvious how to combine the 2 errors, so we'll just percolate the last
                // generated error.
                acc += val.parse::<i64>()? as f64;
            }
        }
    }
    println!("The total is {}", acc);

    Ok(())
}
